schema UNPOD_CHUNK_NAME {
    document UNPOD_CHUNK_NAME {
        # Not to be confused with the UUID generated for this chunk which is called documentid by default
        field document_id type string {
            indexing: summary | attribute
        }
        field chunk_id type int {
            indexing: summary | attribute
        }
        field hub_id type string {
            indexing: summary | attribute
        }
        field kn_token type string {
            indexing: summary | attribute
        }
        # Displayed in the UI as the main identifier for the doc
        field semantic_identifier type string {
            indexing: summary | attribute
        }
        # Must have an additional field for whether to skip title embeddings
        # This information cannot be extracted from either the title field nor title embedding
        field skip_title type bool {
            indexing: attribute
        }
        # May not always match the `semantic_identifier` e.g. for Slack docs the
        # `semantic_identifier` will be the channel name, but the `title` will be empty
        field title type string {
            indexing: summary | index | attribute
            match {
                gram
                gram-size: 3
            }
            index: enable-bm25
        }
        field content type string {
            indexing: summary | index
            match {
                gram
                gram-size: 3
            }
            index: enable-bm25
        }
        # duplication of `content` is far from ideal, but is needed for 
        # non-gram based highlighting for now. If the capability to re-use a 
        # single field to do both is added, `content_summary` should be removed
        field content_summary type string {
            indexing: summary | index
            summary: dynamic
        }
        # Title embedding (x1)
        field title_embedding type tensor<float>(x[VARIABLE_DIM]) {
            indexing: attribute
            attribute {
                distance-metric: angular
            }
        }
        # Content embeddings (chunk + optional mini chunks embeddings)
        # "t" and "x" are arbitrary names, not special keywords
        field embeddings type tensor<float>(t{},x[VARIABLE_DIM]) {
            indexing: attribute
            attribute {
                distance-metric: angular
            }
        }
        # Starting section of the doc, currently unused as it has been replaced by match highlighting
        field blurb type string {
            indexing: summary | attribute
        }
        # https://docs.vespa.ai/en/attributes.html potential enum store for speed, but probably not worth it
        field source_type type string {
            indexing: summary | attribute
            rank: filter
            attribute: fast-search
        }
        # Can also index links https://docs.vespa.ai/en/reference/schema-reference.html#attribute
        # URL type matching
        field source_links type string {
            indexing: summary | attribute
        }
        field section_continuation type bool {
            indexing: summary | attribute
        }
        # Technically this one should be int, but can't change without causing breaks to existing index
        field boost type float {
            indexing: summary | attribute
        }
        field hidden type bool {
            indexing: summary | attribute
            rank: filter
        }
        # Needs to have a separate Attribute list for efficient filtering
        field metadata_list type array<string> {
            indexing: summary | attribute
            rank:filter
            attribute: fast-search
        }
        field metadata type string {
            indexing: summary | attribute
        }
        field doc_updated_at type int {
            indexing: summary | attribute
        }
        field primary_owners type array<string> {
            indexing : summary | attribute
        }
        field secondary_owners type array<string> {
            indexing : summary | attribute
        }
        field access_control_list type weightedset<string> {
            indexing: summary | attribute
            rank: filter
            attribute: fast-search
        }
        field document_sets type weightedset<string> {
            indexing: summary | attribute
            rank: filter
            attribute: fast-search
        }
    }

    # If using different tokenization settings, the fieldset has to be removed, and the field must
    # be specified in the yql like:
    # + 'or ({grammar: "weakAnd", defaultIndex:"title"}userInput(@query)) '
    # + 'or ({grammar: "weakAnd", defaultIndex:"content"}userInput(@query)) '
    # Note: for BM-25, the ngram size (and whether ngrams are used) changes the range of the scores
    fieldset default {
        fields: content, title
    }

    rank-profile default_rank {
        inputs {
            query(decay_factor) double
        }

        function inline document_boost() {
            # 0.5 to 2x score: piecewise sigmoid function stretched out by factor of 3
            # meaning requires 3x the number of feedback votes to have default sigmoid effect
            expression: if(attribute(boost) < 0, 0.5 + (1 / (1 + exp(-attribute(boost) / 3))), 2 / (1 + exp(-attribute(boost) / 3)))
        }

        function inline document_age() {
            # Time in years (91.3 days ~= 3 Months ~= 1 fiscal quarter if no age found)
            expression: max(if(isNan(attribute(doc_updated_at)) == 1, 7890000, now() - attribute(doc_updated_at)) / 31536000, 0)
        }

        # Document score decays from 1 to 0.75 as age of last updated time increases
        function inline recency_bias() {
            expression: max(1 / (1 + query(decay_factor) * document_age), 0.75)
        }

        match-features: recency_bias
    }

    rank-profile hybrid_searchVARIABLE_DIM inherits default, default_rank {
        inputs {
            query(query_embedding) tensor<float>(x[VARIABLE_DIM])
        }

        # This must be separate function for normalize_linear to work
        function vector_score() {
            expression {
                # If no title, the full vector score comes from the content embedding
                (query(title_content_ratio) * if(attribute(skip_title), closeness(field, embeddings), closeness(field, title_embedding))) +
                ((1 - query(title_content_ratio)) * closeness(field, embeddings))
            }
        }

        # This must be separate function for normalize_linear to work
        function keyword_score() {
            expression {
                (query(title_content_ratio) * bm25(title)) +
                ((1 - query(title_content_ratio)) * bm25(content))
            }
        }

        first-phase {
            expression: vector_score
        }

        # Weighted average between Vector Search and BM-25
        # Each is a weighted average between the Title and Content fields
        # Finally each doc is boosted by it's user feedback based boost and recency
        # If any embedding or index field is missing, it just receives a score of 0
        # Assumptions:
        # - For a given query + corpus, the BM-25 scores will be relatively similar in distribution
        #   therefore not normalizing before combining.
        # - For documents without title, it gets a score of 0 for that and this is ok as documents
        #   without any title match should be penalized.
        global-phase {
            expression {
                (
                    # Weighted Vector Similarity Score
                    (query(alpha) * normalize_linear(vector_score)) +
                    # Weighted Keyword Similarity Score
                    ((1 - query(alpha)) * normalize_linear(keyword_score))
                )
                # Boost based on user feedback
                * document_boost
                # Decay factor based on time document was last updated
                * recency_bias
            }
            rerank-count: 1000
        }

        match-features {
            bm25(title)
            bm25(content)
            closeness(field, title_embedding)
            closeness(field, embeddings)
            keyword_score
            vector_score
            document_boost
            recency_bias
            closest(embeddings)
        }
    }

    # Used when searching from the admin UI for a specific doc to hide / boost
    # Very heavily prioritize title
    rank-profile admin_search inherits default, default_rank {
        first-phase {
            expression: bm25(content) + (5 * bm25(title))
        }
    }

    # THE ONES BELOW ARE OUT OF DATE, DO NOT USE
    # THEY MIGHT NOT EVEN WORK AT ALL
    rank-profile keyword_search inherits default, default_rank {
        first-phase {
            expression: bm25(content) * document_boost * recency_bias
        }

        match-features: recency_bias document_boost bm25(content)
    }

    rank-profile semantic_searchVARIABLE_DIM inherits default, default_rank {
        inputs {
            query(query_embedding) tensor<float>(x[VARIABLE_DIM])
        }

        first-phase {
            # Cannot do boost with the chosen embedding model because of high default similarity
            # This depends on the embedding model chosen
            expression: closeness(field, embeddings)
        }

        match-features: recency_bias document_boost closest(embeddings)
    }
}
