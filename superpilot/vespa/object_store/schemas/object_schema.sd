schema UNPOD_CHUNK_NAME {
    document UNPOD_CHUNK_NAME {
        # Unique identifier for each object (similar to `obj_id` in the Python model)
        field obj_id type string {
            indexing: summary | attribute
        }

        # Reference ID for linking the object to other data (similar to `ref_id` in the Python model)
        field ref_id type string {
            indexing: summary | attribute
        }

        # Type of the object (e.g., text, image, etc.)
        field type type string {
            indexing: summary | attribute
        }

        # Source of the object (where the content came from)
        field source type string {
            indexing: summary | attribute
        }

        # Content of the object (the primary text data)
        field content type string {
            indexing: summary | index
            match {
                gram
                gram-size: 3
            }
            index: enable-bm25
        }

        # Metadata of the object stored as an array of strings (to match multiple key-value pairs)
        field metadata type array<string> {
            indexing: summary | attribute
            rank: filter
            attribute: fast-search
        }

        # Privacy settings of the object (public/private)
        field privacy type string {
            indexing: summary | attribute
            rank: filter
            attribute: fast-search
        }

        # The blurb or first sentence of the content, typically used for summaries
        field blurb type string {
            indexing: summary | attribute
        }

        # Embeddings for the object stored as a tensor
        field embeddings type tensor<float>(x[VARIABLE_DIM]) {
            indexing: attribute
            attribute {
                distance-metric: angular
            }
        }

        # Timestamp for when the object was created or updated
        field timestamp type int {
            indexing: summary | attribute
        }
    }

    # Fieldset that defines searchable fields
    fieldset default {
        fields: content
    }

    # Rank profile for the default ranking system (handling document age and recency bias)
    rank-profile default_rank {
        inputs {
            query(decay_factor) double
        }

        function inline document_age() {
            expression: max(if(isNan(attribute(timestamp)) == 1, 7890000, now() - attribute(timestamp)) / 31536000, 0)
        }

        # Recency bias that decays document score based on age
        function inline recency_bias() {
            expression: max(1 / (1 + query(decay_factor) * document_age), 0.75)
        }

        match-features: recency_bias
    }

    # Rank profile for hybrid search (combines embeddings and keyword-based search)
    rank-profile hybrid_search inherits default_rank {
        inputs {
            query(query_embedding) tensor<float>(x[VARIABLE_DIM])
        }

        function vector_score() {
            expression: closeness(field, embeddings)
        }

        function keyword_score() {
            expression: bm25(content)
        }

        first-phase {
            expression: vector_score
        }

        global-phase {
            expression {
                (query(alpha) * normalize_linear(vector_score)) +
                ((1 - query(alpha)) * normalize_linear(keyword_score))
                * recency_bias
            }
            rerank-count: 1000
        }

        match-features {
            bm25(content)
            closeness(field, embeddings)
            keyword_score
            vector_score
            recency_bias
        }
    }

    # Rank profile for keyword-only search (uses BM25 ranking model)
    rank-profile keyword_search inherits default_rank {
        first-phase {
            expression: bm25(content) * recency_bias
        }

        match-features {
            bm25(content)
            recency_bias
        }
    }
}
